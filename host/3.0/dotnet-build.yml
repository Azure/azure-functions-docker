pool:
    vmImage: 'Ubuntu-latest'


pr:
  branches:
    include:
      - dev
      - release/3.x
  paths:
    include:
      - host/3.0/buster/amd64/dotnet/*
      - host/3.0/buster/arm32v7/dotnet/*
      - host/3.0/bionic/arm32v7/dotnet/*
      - host/3.0/dotnet-build.yml

trigger:
  branches:
    include:
      - dev
      - refs/tags/3.*.*
      - refresh/3.*
      - release/3.x

variables:
- name: image_list
  value: ''
 
steps:
  - bash: |
      # login
      set -e
      echo $pswd | docker login -u $(dockerUsername) --password-stdin azurefunctions.azurecr.io

    displayName: login to registry
    continueOnError: false
    env:
      pswd: $(dockerPassword)
    
  - bash: |
      ./host/generate-composite.sh -3 dotnet

    displayName: create dotnet-appservice dockerfiles
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/dotnet:$(Build.SourceBranchName)
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_NAME"

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/dotnet/dotnet-inproc/dotnet.Dockerfile \
                  host/3.0/buster/amd64/dotnet/dotnet-inproc/
      npm run test $IMAGE_NAME --prefix test/
      docker push $IMAGE_NAME
    displayName: dotnet
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/dotnet:$(Build.SourceBranchName)-slim
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/dotnet/dotnet-inproc/dotnet-slim.Dockerfile \
                  host/3.0/buster/amd64/dotnet/dotnet-inproc/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: dotnet-slim
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/dotnet:$(Build.SourceBranchName)-appservice
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/out/dotnet/dotnet-inproc-appservice.Dockerfile \
                  host/3.0/buster/amd64/out/dotnet/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: dotnet-appservice
    continueOnError: false


  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/dotnet-isolated:$(Build.SourceBranchName)-dotnet-isolated5.0
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/dotnet/dotnet-isolated/dotnet-isolated.Dockerfile \
                  host/3.0/buster/amd64/dotnet/dotnet-isolated/
      npm run test $IMAGE_NAME --prefix test/
      docker push $IMAGE_NAME
    displayName: dotnet-isolated (.NET 5)
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/dotnet-isolated:$(Build.SourceBranchName)-dotnet-isolated5.0-slim
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/dotnet/dotnet-isolated/dotnet-isolated-slim.Dockerfile \
                  host/3.0/buster/amd64/dotnet/dotnet-isolated/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: dotnet-isolated-slim (.NET 5)
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/dotnet-isolated:$(Build.SourceBranchName)-dotnet-isolated5.0-appservice
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/out/dotnet/dotnet-isolated-appservice.Dockerfile \
                  host/3.0/buster/amd64/out/dotnet/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: dotnet-isolated-appservice (.NET 5)
    continueOnError: false

  - bash: |
      set -e
      docker run --rm --privileged multiarch/qemu-user-static:register --reset
    displayName: register qemu
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/dotnet:$(Build.SourceBranchName)-arm32v7

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/arm32v7/dotnet/dotnet.Dockerfile \
                  host/3.0/buster/arm32v7/dotnet/
      # npm run test $IMAGE_NAME --prefix test/
      docker push $IMAGE_NAME
    displayName: dotnet arm32v7
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/dotnet:$(Build.SourceBranchName)-bionic-arm32v7

      docker build -t $IMAGE_NAME \
                  -f host/3.0/bionic/arm32v7/dotnet/dotnet.Dockerfile \
                  host/3.0/bionic/arm32v7/dotnet/
      # npm run test $IMAGE_NAME --prefix test/
      docker push $IMAGE_NAME
    displayName: dotnet bionic arm32v7
    continueOnError: false

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Manifest Generator'
    inputs:
      BuildDropPath: host
      Verbosity: Verbose
      DockerImagesToScan: $(image_list)

  - task: PublishPipelineArtifact@1
    displayName: 'Publish SBOM Artifact'
    inputs:
      targetPath: host/_manifest
      artifact: SBOM-Functionsv3-Dotnet-$(Build.SourceBranchName)