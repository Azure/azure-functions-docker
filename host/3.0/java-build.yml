pool:
    name: '1ES-Hosted-AzFunc'
    demands:
      - ImageOverride -equals MMSUbuntu20.04TLS

pr:
  branches:
    include:
      - dev
      - release/3.x
  paths:
    include:
      - host/3.0/buster/amd64/base/*
      - host/3.0/buster/amd64/java/java8/*
      - host/3.0/buster/amd64/java/java11/*

trigger:
  branches:
    include:
      - dev
      - refs/tags/3.*.*
      - u/clink/exec_SBOM_test
      - release/3.x
  paths:
    include:
      - host/3.0/buster/amd64/base/*
      - host/3.0/buster/amd64/java/java8/*
      - host/3.0/buster/amd64/java/java11/*

steps:
  - bash: |
      # login
      set -e
      echo $pswd | docker login -u $(dockerUsername) --password-stdin azurefunctions.azurecr.io

    displayName: login to registry
    continueOnError: false
    env:
      pswd: $(dockerPassword)

  - bash: |
      ./host/generate-composite.sh -3 java

    displayName: create java-appservice dockerfiles
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/java:$(Build.SourceBranchName)-java8

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/java/java8/java8.Dockerfile \
                  host/3.0/buster/amd64/java/java8
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java8
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/java:$(Build.SourceBranchName)-java8-slim
      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/java/java8/java8-slim.Dockerfile \
                  host/3.0/buster/amd64/java/java8
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java8-slim
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/java:$(Build.SourceBranchName)-java8-appservice
      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/out/java/java8-appservice.Dockerfile \
                  host/3.0/buster/amd64/out/java
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java8-appservice
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/java:$(Build.SourceBranchName)-java11

      docker build -t $IMAGE_NAME \
                -f host/3.0/buster/amd64/java/java11/java11.Dockerfile \
                host/3.0/buster/amd64/java/java11
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java11
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/java:$(Build.SourceBranchName)-java11-slim
      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/java/java11/java11-slim.Dockerfile \
                  host/3.0/buster/amd64/java/java11
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java11-slim
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/java:$(Build.SourceBranchName)-java11-appservice
      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/out/java/java11-appservice.Dockerfile \
                  host/3.0/buster/amd64/out/java
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java11-appservice
    continueOnError: false

  - bash: |
      mkdir -p "$(System.ArtifactsDirectory)/_SBOM"

    displayName: Create SBOM Directory
    continueOnError: false

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'SBOM Generation Task'
    condition: succeeded()
  # What do we do for this?  There is no output directory - it is a container build
    inputs:
      BuildDropPath: '$(System.ArtifactsDirectory)/_SBOM'

    # Show the contents of the SBOM in the build output logs
  - task: Bash@3
    displayName: 'View SBOM'
    condition: succeeded()
    inputs:
      targetType: 'inline'
      script: |
        echo "Showing the SBOM contents, just because"
        for f in $(find "$(System.ArtifactsDirectory)/_SBOM/_manifest" -type f); do
          echo
          ls -l $f
          [[ $f == *.json ]] && sha256sum $f
          echo "==== START: $f"
          [[ $f == *.json ]] && jq . $f || cat $f
          echo
          echo "==== END: $f"
          echo
        done
        true