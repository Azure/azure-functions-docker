pool:
    vmImage: 'Ubuntu-latest'
    
pr:
  branches:
    include:
      - dev
      - release/3.x
  paths:
    include:
      - host/3.0/buster/amd64/base/*
      - host/3.0/buster/amd64/powershell/powershell6/*
      - host/3.0/buster/amd64/powershell/powershell7/*
      - host/3.0/powershell-build.yml
      

trigger:
  branches:
    include:
      - dev
      - refs/tags/3.*.*
      - refresh/3-refresh
      - release/3.x

variables:
- name: image_list
  value: ''

steps:
  - bash: |
      # login
      set -e
      echo $pswd | docker login -u $(dockerUsername) --password-stdin azurefunctions.azurecr.io

    displayName: login to registry
    continueOnError: false
    env:
      pswd: $(dockerPassword)

  - bash: |
      ./host/generate-composite.sh -3 powershell

    displayName: create powershell-appservice dockerfiles
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/powershell:$(Build.SourceBranchName)-powershell6
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_NAME"

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/powershell/powershell6/powershell6.Dockerfile \
                  host/3.0/buster/amd64/powershell/powershell6
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell6
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/powershell:$(Build.SourceBranchName)-powershell6-slim
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/powershell/powershell6/powershell6-slim.Dockerfile \
                  host/3.0/buster/amd64/powershell/powershell6/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell6-slim
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/powershell:$(Build.SourceBranchName)-powershell6-appservice
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/out/powershell/powershell6-appservice.Dockerfile \
                  host/3.0/buster/amd64/out/powershell/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell6-appservice
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/powershell:$(Build.SourceBranchName)-powershell7
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"


      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/powershell/powershell7/powershell7.Dockerfile \
                  host/3.0/buster/amd64/powershell/powershell7/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell7
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/powershell:$(Build.SourceBranchName)-powershell7-slim
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/powershell/powershell7/powershell7-slim.Dockerfile \
                  host/3.0/buster/amd64/powershell/powershell7/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell7-slim
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/3.0/powershell:$(Build.SourceBranchName)-powershell7-appservice
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/3.0/buster/amd64/out/powershell/powershell7-appservice.Dockerfile \
                  host/3.0/buster/amd64/out/powershell/
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: powershell7-appservice
    continueOnError: false

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Manifest Generator'
    inputs:
      BuildDropPath: host
      Verbosity: Verbose
      DockerImagesToScan: $(image_list)

  - task: PublishPipelineArtifact@1
    displayName: 'Publish SBOM Artifact'
    inputs:
      targetPath: host/_manifest
      artifact: SBOM-Functionsv3-Powershell-$(Build.SourceBranchName)