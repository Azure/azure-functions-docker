pool:
    vmImage: 'Ubuntu-latest'

pr:
  branches:
    include:
      - dev
      - release/4.x
  paths:
    include:
      - host/4/bullseye/amd64/base/*
      - host/4/bullseye/amd64/powershell/powershell70/*
      - host/4/bullseye/amd64/powershell/powershell72/*
      - host/4/bookworm/powershell/powershell74/*
      - host/4/powershell-build.yml

trigger:
  branches:
    include:
      - dev
      - refs/tags/4.*
      - release/4.x
      - nightly-build
      - refresh/4.*

variables:
- name: image_list
  value: ''

jobs:
  - job: PowerShell
    strategy:
      matrix:
        _72:
          psVersion: "7.2"
          psFileVersion: "72"
          dockerfilePath: "bullseye/amd64"
          appservicePath: "host/4/bullseye/amd64/out/powershell"
        _74:
          psVersion: "7.4"
          psFileVersion: "74"
          dockerfilePath: "bookworm"
          appservicePath: "host/4/bookworm/powershell/powershell74"
    steps:
      - bash: |
          # login
          set -e
          echo $pswd | docker login -u $(dockerUsername) --password-stdin azurefunctions.azurecr.io

        displayName: login to registry
        continueOnError: false
        env:
          pswd: $(dockerPassword)

      - bash: |
          ./host/generate-composite.sh -4 powershell

        displayName: create powershell-appservice dockerfiles
        continueOnError: false

      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/powershell:$(Build.SourceBranchName)-powershell$(psVersion)
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

          docker build -t $IMAGE_NAME \
                      -f host/4/$(dockerfilePath)/powershell/powershell$(psFileVersion)/powershell$(psFileVersion).Dockerfile \
                      host/4/$(dockerfilePath)/powershell/powershell$(psFileVersion)
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: powershell$(psVersion)
        continueOnError: false

      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/powershell:$(Build.SourceBranchName)-powershell$(psVersion)-slim
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

          docker build -t $IMAGE_NAME \
                      -f host/4/$(dockerfilePath)/powershell/powershell$(psFileVersion)/powershell$(psFileVersion)-slim.Dockerfile \
                      host/4/$(dockerfilePath)/powershell/powershell$(psFileVersion)
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: powershell$(psVersion)-slim
        continueOnError: false

      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/powershell:$(Build.SourceBranchName)-powershell$(psVersion)-appservice
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

          docker build -t $IMAGE_NAME \
                      -f $(appservicePath)/powershell$(psFileVersion)-appservice.Dockerfile \
                      $(appservicePath)
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: powershell$(psVersion)-appservice
        continueOnError: false

  - job: Publish
    dependsOn: PowerShell
    steps:
      - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
        displayName: 'Manifest Generator'
        inputs:
          BuildDropPath: host
          Verbosity: Verbose
          DockerImagesToScan: $(image_list)

      - task: PublishPipelineArtifact@1
        displayName: 'Publish SBOM Artifact'
        inputs:
          targetPath: host/_manifest
          artifact: SBOM-Functionsv4-Powershell-$(Build.SourceBranchName)