pool:
    vmImage: 'Ubuntu-latest'
    
pr:
  branches:
    include:
      - dev
      - release/4.x
  paths:
    include:
      - host/4/bullseye/base/*
      - host/4/bullseye/dotnet/*
      - host/4/bookworm/dotnet/*
      - host/4/mariner/dotnet/*
      - host/4/dotnet-build.yml

trigger:
  branches:
    include:
      - dev
      - refs/tags/4.*
      - refresh/4.*
      - release/4.x
      - nightly-build

variables:
- name: image_list
  value: ''

jobs:
  - job: Dotnet
    strategy:
      matrix:
        _inproc:
          dotnetVersion: "dotnet"
          dockerfilePath: "host/4/bullseye/dotnet/dotnet-inproc/"
          dockerImagePath: "dotnet"
          dockerImageName: ""
        _inproc:
          dotnetVersion: "dotnet-inproc-appservice"
          dockerfilePath: "host/4/bullseye/dotnet/dotnet-inproc/"
          dockerImagePath: "dotnet"
          dockerImageName: "-appservice"
        _inproc-slim:
          dotnetVersion: "dotnet-slim"
          dockerfilePath: "host/4/bullseye/dotnet/dotnet-inproc/"
          dockerImagePath: "dotnet-slim"
          dockerImageName: "-slim"
        _bookworm-net-6:
          dotnetVersion: "dotnet6"
          dockerfilePath: "host/4/bookworm/dotnet/"
          dockerImagePath: "dotnet"
          dockerImageName: "-dotnet6-bookworm"
        _bookworm-net-8:
          dotnetVersion: "dotnet8"
          dockerfilePath: "host/4/bookworm/dotnet/"
          dockerImagePath: "dotnet"
          dockerImageName: "-dotnet8.0"
        _appservice-net-8:
          dotnetVersion: "dotnet8-appservice"
          dockerfilePath: "host/4/bookworm/dotnet/"
          dockerImagePath: "dotnet"
          dockerImageName: "-dotnet8.0-appservice" 
    steps:
      - bash: |
          # login
          set -e
          echo $pswd | docker login -u $(dockerUsername) --password-stdin azurefunctions.azurecr.io

        displayName: login to registry
        continueOnError: false
        env:
          pswd: $(dockerPassword)

      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/$(dockerImagePath):$(Build.SourceBranchName)$(dockerImageName)
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_NAME"

          docker build -t $IMAGE_NAME \
                      -f $(dockerfilePath)$(dotnetVersion).Dockerfile \
                      $(dockerfilePath)
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: $(dotnetVersion)
        continueOnError: false
  - job: Publish
    dependsOn: Dotnet
    steps:
      - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
        displayName: 'Manifest Generator'
        inputs:
          BuildDropPath: host
          Verbosity: Verbose
          DockerImagesToScan: $(image_list)

      - task: PublishPipelineArtifact@1
        displayName: 'Publish SBOM Artifact'
        inputs:
          targetPath: host/_manifest
          artifact: SBOM-Functionsv4-dotnet-$(Build.SourceBranchName)
