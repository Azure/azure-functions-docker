pool:
    vmImage: 'Ubuntu-latest'

pr:
  branches:
    include:
      - dev
      - release/4.x
  paths:
    include:
      - host/4/bullseye/amd64/base/*
      - host/4/bullseye/amd64/java/java8/*
      - host/4/bullseye/amd64/java/java8-zulu/*
      - host/4/bullseye/amd64/java/java11/*
      - host/4/bullseye/amd64/java/java11-zulu/*
      - host/4/bullseye/amd64/java/java17/*
      - host/4/java-build.yml

trigger:
  branches:
    include:
      - dev
      - refs/tags/4.*
      - release/4.x
      - refresh/4.*
  paths:
    include:
      - host/4/bullseye/amd64/base/*
      - host/4/bullseye/amd64/java/java8/*
      - host/4/bullseye/amd64/java/java8-zulu/*
      - host/4/bullseye/amd64/java/java11/*
      - host/4/bullseye/amd64/java/java11-zulu/*
      - host/4/bullseye/amd64/java/java17/*
      - host/4/java-build.yml

variables:
- name: image_list
  value: ''

steps:
  - bash: |
      # login
      set -e
      echo $pswd | docker login -u $(dockerUsername) --password-stdin azurefunctions.azurecr.io

    displayName: login to registry
    continueOnError: false
    env:
      pswd: $(dockerPassword)

  - bash: |
      set -e
      cp host/mvn-entrypoint.sh host/4/bullseye/amd64/java/java8
      cp host/mvn-entrypoint.sh host/4/bullseye/amd64/java/java11
      cp host/mvn-entrypoint.sh host/4/bullseye/amd64/java/java17
      cp host/settings-docker.xml host/4/bullseye/amd64/java/java8
      cp host/settings-docker.xml host/4/bullseye/amd64/java/java11
      cp host/settings-docker.xml host/4/bullseye/amd64/java/java17
      

  - bash: |
      ./host/generate-composite.sh -4 java

    displayName: create java-appservice dockerfiles
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java8
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_NAME"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/java/java8/java8.Dockerfile \
                  host/4/bullseye/amd64/java/java8
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java8
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java8-slim
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/java/java8/java8-slim.Dockerfile \
                  host/4/bullseye/amd64/java/java8
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java8-slim
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java8-appservice
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/out/java/java8-appservice.Dockerfile \
                  host/4/bullseye/amd64/out/java
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java8-appservice
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java8.1-appservice
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/out/java/java8-zulu-appservice.Dockerfile \
                  host/4/bullseye/amd64/out/java
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java8.1-appservice
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java8-build
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/java/java8/java8-build.Dockerfile \
                  host/4/bullseye/amd64/java/java8
      docker push $IMAGE_NAME
    displayName: java8-build
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java11
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      

      docker build -t $IMAGE_NAME \
                -f host/4/bullseye/amd64/java/java11/java11.Dockerfile \
                host/4/bullseye/amd64/java/java11
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java11
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java11-slim
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/java/java11/java11-slim.Dockerfile \
                  host/4/bullseye/amd64/java/java11
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java11-slim
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java11-appservice
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/out/java/java11-appservice.Dockerfile \
                  host/4/bullseye/amd64/out/java
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java11-appservice
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java11.1-appservice
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/out/java/java11-zulu-appservice.Dockerfile \
                  host/4/bullseye/amd64/out/java
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java11.1-appservice
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java11-build
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/java/java11/java11-build.Dockerfile \
                  host/4/bullseye/amd64/java/java11
      docker push $IMAGE_NAME
    displayName: java11-build
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java17
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
      

      docker build -t $IMAGE_NAME \
                -f host/4/bullseye/amd64/java/java17/java17.Dockerfile \
                host/4/bullseye/amd64/java/java17
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java17
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java17-slim
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/java/java17/java17-slim.Dockerfile \
                  host/4/bullseye/amd64/java/java17
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java17-slim
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java17-appservice
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/out/java/java17-appservice.Dockerfile \
                  host/4/bullseye/amd64/out/java
      npm run test $IMAGE_NAME --prefix  test/
      docker push $IMAGE_NAME
    displayName: java17-appservice
    continueOnError: false

  - bash: |
      set -e
      IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java17-build
      IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
      echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

      docker build -t $IMAGE_NAME \
                  -f host/4/bullseye/amd64/java/java17/java17-build.Dockerfile \
                  host/4/bullseye/amd64/java/java17
      docker push $IMAGE_NAME
    displayName: java17-build
    continueOnError: false

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Manifest Generator'
    inputs:
      BuildDropPath: host
      Verbosity: Verbose
      DockerImagesToScan: $(image_list)

  - task: PublishPipelineArtifact@1
    displayName: 'Publish SBOM Artifact'
    inputs:
      targetPath: host/_manifest
      artifact: SBOM-Functionsv4-Java-$(Build.SourceBranchName)