pool:
    vmImage: 'Ubuntu-latest'

pr:
  branches:
    include:
      - dev
      - release/4.x
  paths:
    include:
      - host/4/bullseye/amd64/base/*
      - host/4/bullseye/amd64/java/*
      - host/4/bookworm/java/*
      - host/4/java-build.yml

trigger:
  branches:
    include:
      - dev
      - refs/tags/4.*
      - refresh/4.*
      - release/4.x
      - nightly-build

variables:
- name: image_list
  value: ''

jobs:
  - job: Java
    strategy:
      matrix:
        _8:
          javaVersion: "8"
          dockerfilePath: "bullseye/amd64"
          appservicePath: "host/4/bullseye/amd64/out/java"
        _11:
          javaVersion: "11"
          dockerfilePath: "bullseye/amd64"
          appservicePath: "host/4/bullseye/amd64/out/java"
        _17:
          javaVersion: "17"
          dockerfilePath: "bullseye/amd64"
          appservicePath: "host/4/bullseye/amd64/out/java"
        _21:
          javaVersion: "21"
          dockerfilePath: "bookworm"
          appservicePath: "host/4/bookworm/java/java21"
    steps:
      - bash: |
          # login
          set -e
          echo $pswd | docker login -u $(dockerUsername) --password-stdin azurefunctions.azurecr.io

        displayName: login to registry
        continueOnError: false
        env:
          pswd: $(dockerPassword)

      - bash: |
          set -e
          cp host/mvn-entrypoint.sh host/4/$(dockerfilePath)/java/java$(javaVersion)
          cp host/settings-docker.xml host/4/$(dockerfilePath)/java/java$(javaVersion)

      - bash: |
          ./host/generate-composite.sh -4 java

        displayName: create java-appservice dockerfiles
        continueOnError: false

      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java$(javaVersion)
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_NAME"

          docker build -t $IMAGE_NAME \
                      -f host/4/$(dockerfilePath)/java/java$(javaVersion)/java$(javaVersion).Dockerfile \
                      host/4/$(dockerfilePath)/java/java$(javaVersion)
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: java$(javaVersion)
        continueOnError: false

      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java$(javaVersion)-slim
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

          docker build -t $IMAGE_NAME \
                      -f host/4/$(dockerfilePath)/java/java$(javaVersion)/java$(javaVersion)-slim.Dockerfile \
                      host/4/$(dockerfilePath)/java/java$(javaVersion)
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: java$(javaVersion)-slim
        continueOnError: false

      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java$(javaVersion)-appservice
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

          docker build -t $IMAGE_NAME \
                      -f $(appservicePath)/java$(javaVersion)-appservice.Dockerfile \
                      $(appservicePath)
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: java$(javaVersion)-appservice
        continueOnError: false

      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/java:$(Build.SourceBranchName)-java$(javaVersion)-build
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

          docker build -t $IMAGE_NAME \
                      -f host/4/$(dockerfilePath)/java/java$(javaVersion)/java$(javaVersion)-build.Dockerfile \
                      host/4/$(dockerfilePath)/java/java$(javaVersion)
          docker push $IMAGE_NAME
        displayName: java$(javaVersion)-build
        continueOnError: false

  - job: Publish
    dependsOn: Java
    steps:
      - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
        displayName: 'Manifest Generator'
        inputs:
          BuildDropPath: host
          Verbosity: Verbose
          DockerImagesToScan: $(image_list)

      - task: PublishPipelineArtifact@1
        displayName: 'Publish SBOM Artifact'
        inputs:
          targetPath: host/_manifest
          artifact: SBOM-Functionsv4-Java-$(Build.SourceBranchName)