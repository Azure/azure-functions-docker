pool:
    vmImage: 'Ubuntu-latest'

pr:
  branches:
    include:
      - dev
      - release/4.x
  paths:
    include:
      - host/4/bullseye/base/*
      - host/4/bullseye/node/*
      - host/4/node-build.yml

trigger:
  branches:
    include:
      - dev
      - refs/tags/4.*
      - refresh/4.*
      - release/4.x
      - nightly-build

jobs:
  - job: Node
    strategy:
      matrix:
        _14:
          nodeVersion: "14"
          dockerfilePath: "bullseye"
          appservicePath: "host/4/bullseye/out/node"
          bookworm: false
        _16:
          nodeVersion: "16"
          dockerfilePath: "bullseye"
          appservicePath: "host/4/bullseye/out/node"
          bookworm: false
        _18:
          nodeVersion: "18"
          dockerfilePath: "bullseye"
          appservicePath: "host/4/bullseye/out/node"
          bookworm: false
        _20:
          nodeVersion: "20"
          dockerfilePath: "bullseye"
          appservicePath: "host/4/bullseye/out/node"
          bookworm: false
        _22:
          nodeVersion: "22"
          dockerfilePath: "bookworm"
          appservicePath: "host/4/bookworm/node/node22"
          bookworm: true
    steps:
      - bash: |
          # login
          set -e
          echo $pswd | docker login -u $(dockerUsername) --password-stdin azurefunctions.azurecr.io

        displayName: login to registry
        continueOnError: false
        env:
          pswd: $(dockerPassword)
      
      - bash: |
          ./host/generate-composite.sh -4 node

        displayName: create node-appservice dockerfiles
        continueOnError: false
        
      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/node:$(Build.SourceBranchName)-node$(nodeVersion)
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_NAME"

          docker build -t $IMAGE_NAME \
                      -f host/4/$(dockerfilePath)/node/node$(nodeVersion)/node$(nodeVersion).Dockerfile \
                      host/4/$(dockerfilePath)/node/node$(nodeVersion)
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: node$(nodeVersion)
        continueOnError: false

      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/node:$(Build.SourceBranchName)-node$(nodeVersion)-slim
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

          docker build -t $IMAGE_NAME \
                      -f host/4/bullseye/node/node$(nodeVersion)/node$(nodeVersion)-slim.Dockerfile \
                      host/4/$(dockerfilePath)/node/node$(nodeVersion)/
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: node$(nodeVersion)-slim
        condition: ne(variables['nodeVersion'], '22')
        continueOnError: false

      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/4/node:$(Build.SourceBranchName)-node$(nodeVersion)-appservice
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"

          docker build -t $IMAGE_NAME \
                      -f $(appservicePath)/node$(nodeVersion)-appservice.Dockerfile \
                      $(appservicePath)
          npm run test $IMAGE_NAME --prefix  test/
          docker push $IMAGE_NAME
        displayName: node$(nodeVersion)-appservice
        continueOnError: false
  - job: Publish
    dependsOn: Node
    steps:
      - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
        displayName: 'Manifest Generator'
        inputs:
          BuildDropPath: host
          Verbosity: Verbose
          DockerImagesToScan: $(image_list)

      - task: PublishPipelineArtifact@1
        displayName: 'Publish SBOM Artifact'
        inputs:
          targetPath: host/_manifest
          artifact: SBOM-Functionsv4-Node-$(Build.SourceBranchName)
    