pool:
  vmImage: "Ubuntu-latest"

pr:
  branches:
    include:
      - dev
      - release/4.x
  paths:
    include:
      - host/4/bullseye/amd64/base/*
      - host/4/bullseye/amd64/python/*
      - host/4/python-build.yml

trigger:
  branches:
    include:
      - dev
      - refs/tags/4.*
      - refresh/4.*
      - release/4.x
      - nightly-build

variables:
  HOST_MAJOR_VERSION: 4
  DOCKER_BUILDKIT: 1
  image_list: ''

jobs:
  - job: Python
    strategy:
      matrix:
        _37:
          pythonVersion: "3.7"
          pythonImageNameSuffix: "37"
        _38:
          pythonVersion: "3.8"
          pythonImageNameSuffix: "38"
        _39:
          pythonVersion: "3.9"
          pythonImageNameSuffix: "39"
        _310:
          pythonVersion: "3.10"
          pythonImageNameSuffix: "310"
        _311:
          pythonVersion: "3.11"
          pythonImageNameSuffix: "311"
    steps:
      - bash: |
          # login
          set -e
          echo $pswd | docker login -u $(dockerUsername) --password-stdin azurefunctions.azurecr.io
        displayName: login to registry
        continueOnError: false
        env:
          pswd: $(dockerPassword)
      - bash: |
          ./host/generate-composite.sh -$(HOST_MAJOR_VERSION) python
        displayName: create python-appservice dockerfiles
        continueOnError: false
      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/$(HOST_MAJOR_VERSION)/python:$(Build.SourceBranchName)-python$(pythonVersion)
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_NAME"
          docker build -t $IMAGE_NAME \
                      -f host/$(HOST_MAJOR_VERSION)/bullseye/amd64/python/python$(pythonImageNameSuffix)/python$(pythonImageNameSuffix).Dockerfile \
                      host/$(HOST_MAJOR_VERSION)/bullseye/amd64/python/python$(pythonImageNameSuffix)
          npm run test $IMAGE_NAME --prefix test/
          docker push $IMAGE_NAME
        displayName: python
        continueOnError: false
      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/$(HOST_MAJOR_VERSION)/python:$(Build.SourceBranchName)-python$(pythonVersion)-slim
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
          docker build -t $IMAGE_NAME \
                      -f host/$(HOST_MAJOR_VERSION)/bullseye/amd64/python/python$(pythonImageNameSuffix)/python$(pythonImageNameSuffix)-slim.Dockerfile \
                      host/$(HOST_MAJOR_VERSION)/bullseye/amd64/python/python$(pythonImageNameSuffix)/
          npm run test $IMAGE_NAME --prefix test/
          docker push $IMAGE_NAME
        displayName: python-slim
        continueOnError: false
      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/$(HOST_MAJOR_VERSION)/python:$(Build.SourceBranchName)-python$(pythonVersion)-appservice
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
          docker build -t $IMAGE_NAME \
                      -f host/$(HOST_MAJOR_VERSION)/bullseye/amd64/out/python/python$(pythonImageNameSuffix)-appservice.Dockerfile \
                      host/$(HOST_MAJOR_VERSION)/bullseye/amd64/out/python/
          npm run test $IMAGE_NAME --prefix test/
          docker push $IMAGE_NAME
        displayName: python-appservice
        continueOnError: false
      - bash: |
          set -e
          IMAGE_NAME=azurefunctions.azurecr.io/azure-functions/$(HOST_MAJOR_VERSION)/python:$(Build.SourceBranchName)-python$(pythonVersion)-buildenv
          IMAGE_ARRAY="$(image_list),$IMAGE_NAME"
          echo "##vso[task.setvariable variable=image_list;]$IMAGE_ARRAY"
          docker build -t $IMAGE_NAME \
                      -f host/$(HOST_MAJOR_VERSION)/bullseye/amd64/python/python$(pythonImageNameSuffix)/python$(pythonImageNameSuffix)-buildenv.Dockerfile \
                      host/$(HOST_MAJOR_VERSION)/bullseye/amd64/python/python$(pythonImageNameSuffix)/
          docker push $IMAGE_NAME
        displayName: python-buildenv
        continueOnError: false
      - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
        displayName: 'Manifest Generator'
        inputs:
          BuildDropPath: host
          Verbosity: Verbose
          DockerImagesToScan: $(image_list)

      - task: PublishPipelineArtifact@1
        displayName: 'Publish SBOM Artifact'
        inputs:
          targetPath: host/_manifest
          artifact: SBOM-Functionsv4-Python$(pythonVersion)-$(Build.SourceBranchName)
